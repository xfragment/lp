def prim(graph):
    mst = []
    visited = set()
    start_vertex = next(iter(graph))
    visited.add(start_vertex)
    edges = [(cost, start_vertex, to) for to, cost in graph[start_vertex].items()]

    while edges:
        cost, frm, to = min(edges)
        edges.remove((cost, frm, to))
        if to not in visited:
            visited.add(to)
            mst.append((frm, to, cost))
            for to_next, cost_next in graph[to].items():
                if to_next not in visited:
                    edges.append((cost_next, to, to_next))

    return mst
graph = {'A': {'B': 2, 'C': 3}, 'B': {'A': 2, 'C': 4}, 'C': {'A': 3, 'B': 4}}
graph = {}
vertex_count = int(input("Enter the number of vertices: "))
for i in range(vertex_count):
    vertex = input("Enter vertex: ")
    neighbors_count = int(input(f"Enter the number of neighbors for vertex {vertex}: "))
    neighbors = {}
    for j in range(neighbors_count):
        neighbor = input(f"Enter neighbor {j+1}: ")
        cost = int(input(f"Enter cost for the edge ({vertex} - {neighbor}): "))
        neighbors[neighbor] = cost
    graph[vertex] = neighbors
print(prim(graph))